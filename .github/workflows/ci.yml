# Continuos Integration workflow
name: 🔄 CI

defaults:
  run:
    shell: bash

# Controls when the workflow will run
on:
  push:
    branches: ['main']

  pull_request: 
    paths: 
      - .github/workflows/ci.yml
      - backend/**/*
      - frontend/**/*
      - package.json
      - tsconfig.json

  # Can be triggered by other workflows
  workflow_call:
    inputs:
      latest_deps:
        type: boolean
        default: false
        description: Whether the latest dependencies should be used
      latest_parser:
        type: boolean
        default: false
        description: Whether the latest parser available should be used
      success_on_failure:
        type: boolean
        default: false
        description: Whether the workflow should be marked as success even on failures. Relevant for auto-update checks.
    outputs:
      success:
        description: Whether this workflow failed or success. Only relevant if `inputs.success_on_failure` is `true`.
        value: ${{ jobs.set_success_output.outputs.success }}
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      latest_deps:
        type: boolean
        default: false
        description: Whether the latest dependencies should be used.
      latest_parser:
        type: boolean
        default: false
        description: Whether the latest parser available should be used
      success_on_failure:
        type: boolean
        default: false
        description: Whether the workflow should be marked as success even on failures. Relevant for auto-update checks.  

# Jobs
jobs:

  sanitize:
    name: "🧹 Sanitize"
    runs-on: ubuntu-22.04
    outputs:
      success: ${{ steps.result.outputs.success }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ NodeJS setup
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🔧 Install latest dependencies
        if: ${{ always() && contains(inputs.latest_deps, 'true') }}
        id: install-latest-deps
        run: |
          {
            npm ci
            cd backend
            ../scripts/force_update.sh
            cd ../frontend
            ../scripts/force_update.sh
          } || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_OUTPUT
          }

      - name: 🔧 Install latest parser
        if: ${{ always() && !contains(inputs.latest_deps, 'true') && contains(inputs.latest_parser, 'true') }}
        id: install-latest-parser
        run: |
          {
            npm ci
            cd backend
            npm i parser-de-notas-de-corretagem@latest
            cd ../frontend
            npm i -D parser-de-notas-de-corretagem@latest
          } || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_OUTPUT
          }

      - name: 🔧 Install dependencies
        if: ${{ always() && !contains(inputs.latest_deps, 'true') && !contains(inputs.latest_parser, 'true') }}
        id: install-deps
        run:  |
          npm ci || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_OUTPUT
          }

      - name: 🧹 Run linters
        if: ${{ steps.install-latest-deps.outputs.success != 'false' && steps.install-deps.outputs.success != 'false' && steps.install-latest-parser.outputs.success != 'false' }}
        id: linter
        run: |
          npm run lint || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_OUTPUT
          }

      - name: 🎯 Check if the job succeeded
        if: ${{ always() }}
        id: result
        run: |
          [[ "${{ steps.install-latest-deps.outputs.success }}" != "false" ]] && \
          [[ "${{ steps.install-latest-parser.outputs.success }}" != "false" ]] && \
          [[ "${{ steps.install-deps.outputs.success }}" != "false" ]] && \
          [[ "${{ steps.linter.outputs.success }}" != "false" ]] && \
          echo "success=true" >> $GITHUB_OUTPUT || echo "success=false" >> $GITHUB_OUTPUT

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [
          { name: linux, version: ubuntu-22.04, script: ../scripts/force_update.sh },
          { name: windows, version: windows-latest, script: ../scripts/force_update.ps1 },
          { name: mac, version: macOS-latest, script: ../scripts/force_update.sh }
          ]
    name: "🧪 Test (${{ matrix.os.version }})"
    runs-on: ${{ matrix.os.version }}
    outputs:
      linux-success: ${{ steps.result.outputs.linux-success }}
      windows-success: ${{ steps.result.outputs.windows-success }}
      mac-success: ${{ steps.result.outputs.macOS-latest-success }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ NodeJS setup
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🔧 Install latest dependencies
        if: ${{ always() && contains(inputs.latest_deps, 'true') }}
        id: install-latest-deps
        run: |
          {
            npm ci
            cd backend
            ${{ matrix.os.script }}
            cd ../frontend
            ${{ matrix.os.script }}
          } || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_OUTPUT
          }

      - name: 🔧 Install latest parser
        if: ${{ always() && !contains(inputs.latest_deps, 'true') && contains(inputs.latest_parser, 'true') }}
        id: install-latest-parser
        run: |
          {
            npm ci
            cd backend
            npm i parser-de-notas-de-corretagem@latest
            cd ../frontend
            npm i -D parser-de-notas-de-corretagem@latest
          } || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_OUTPUT
          }

      - name: 🔧 Install dependencies
        if: ${{ always() && !contains(inputs.latest_deps, 'true') && !contains(inputs.latest_parser, 'true') }}
        id: install-deps
        run:  |
          npm ci || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_OUTPUT
          }

      - name: 🧪 Run test
        if: ${{ steps.install-latest-deps.outputs.success != 'false' && steps.install-deps.outputs.success != 'false' && steps.install-latest-parser.outputs.success != 'false' }}
        id: test
        run: |
          npm run test || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_OUTPUT
          }

      - name: 🎯 Check if the job succeeded
        if: ${{ always() }}
        id: result
        run: |
          [[ "${{ steps.install-latest-deps.outputs.success }}" != "false" ]] && \
          [[ "${{ steps.install-latest-parser.outputs.success }}" != "false" ]] && \
          [[ "${{ steps.install-deps.outputs.success }}" != "false" ]] && \
          [[ "${{ steps.test.outputs.success }}" != "false" ]] && \
          echo "${{ matrix.os.name }}-success=true" >> $GITHUB_OUTPUT || echo "${{ matrix.os.name }}-success=false" >> $GITHUB_OUTPUT

  build:
    strategy:
      fail-fast: false
      matrix:
        os: [
          { name: linux, version: ubuntu-22.04, script: ../scripts/force_update.sh },
          { name: windows, version: windows-latest, script: ../scripts/force_update.ps1 },
          { name: mac, version: macOS-latest, script: ../scripts/force_update.sh }
          ]
    name: "📦 Build (${{ matrix.os.version }})"
    runs-on: ${{ matrix.os.version }}
    outputs:
      linux-success: ${{ steps.result.outputs.linux-success }}
      windows-success: ${{ steps.result.outputs.windows-success }}
      mac-success: ${{ steps.result.outputs.mac-success }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ NodeJS setup
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🔧 Install latest dependencies
        if: ${{ always() && contains(inputs.latest_deps, 'true') }}
        id: install-latest-deps
        run: |
          {
            npm ci
            cd backend
            ${{ matrix.os.script }}
            cd ../frontend
            ${{ matrix.os.script }}
          } || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_OUTPUT
          }

      - name: 🔧 Install latest parser
        if: ${{ always() && !contains(inputs.latest_deps, 'true') && contains(inputs.latest_parser, 'true') }}
        id: install-latest-parser
        run: |
          {
            npm ci
            cd backend
            npm i parser-de-notas-de-corretagem@latest
            cd ../frontend
            npm i -D parser-de-notas-de-corretagem@latest
          } || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_OUTPUT
          }

      - name: 🔧 Install dependencies
        if: ${{ always() && !contains(inputs.latest_deps, 'true') && !contains(inputs.latest_parser, 'true') }}
        id: install-deps
        run:  |
          npm ci || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_OUTPUT
          }

      - name: 📦 Run build
        if: ${{ steps.install-latest-deps.outputs.success != 'false' && steps.install-deps.outputs.success != 'false' && steps.install-latest-parser.outputs.success != 'false' }}
        id: build
        run: |
          npm run build || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_OUTPUT
          }

      - name: 🎯 Check if the job succeeded
        if: ${{ always() }}
        id: result
        run: |
          [[ "${{ steps.install-latest-deps.outputs.success }}" != "false" ]] && \
          [[ "${{ steps.install-latest-parser.outputs.success }}" != "false" ]] && \
          [[ "${{ steps.install-deps.outputs.success }}" != "false" ]] && \
          [[ "${{ steps.build.outputs.success }}" != "false" ]] && \
          echo "${{ matrix.os.name }}-success=true" >> $GITHUB_OUTPUT || echo "${{ matrix.os.name }}-success=false" >> $GITHUB_OUTPUT

  set_success_output:
    name: 🎯 Set success output
    needs: [sanitize, test, build]
    if: ${{ always() }}
    runs-on: ubuntu-22.04
    outputs:
      success: ${{ steps.set-success.outputs.success }}
    steps:
      - name: 🎯 Set success output
        id: set-success
        run: |
          success_result=''
          [[ "${{ needs.sanitize.outputs.success }}" != "false" ]] && \
            [[ "${{ needs.test.outputs.linux-success }}" != "false" ]] && \
            [[ "${{ needs.test.outputs.windows-success }}" != "false" ]] && \
            [[ "${{ needs.test.outputs.mac-success }}" != "false" ]] && \
            [[ "${{ needs.build.outputs.linux-success }}" != "false" ]] && \
            [[ "${{ needs.build.outputs.windows-success }}" != "false" ]] && \
            [[ "${{ needs.build.outputs.mac-success }}" != "false" ]] && \
            success_result='true'|| success_result='false'

          echo "[INFO] success result: ${success_result}"
          echo "success=${success_result}" >> $GITHUB_OUTPUT || echo "success=${success_result}" >> $GITHUB_OUTPUT

  check_if_ci_is_new_release:
    name: 🔍 Check if it's a new release
    runs-on: ubuntu-22.04
    needs: set_success_output
    if: github.event_name == 'push'
    outputs:
      release_version: ${{ steps.result.outputs.release_version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔍 Check if the commit has a tag associated to it
        id: result
        run: |
          tag="$(git tag --points-at ${{ github.sha }})"
          if [[ -n "${tag}" ]] && [[ "${tag}" =~ v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+ ]]; then
            echo "release_version=${tag}" >> "$GITHUB_OUTPUT";
          fi

  make_release:
    name: 💫 Create a new release
    needs: check_if_ci_is_new_release
    if: ${{ github.event_name == 'push' && needs.check_if_ci_is_new_release.outputs.release_version }}
    uses: ./.github/workflows/release.yml
    secrets: inherit
    with:
      release_version: ${{ needs.check_if_ci_is_new_release.outputs.release_version }}

# EOF

