# Auto-update workflow
name: üì° Auto-update

on:
  # Nightly - running at 1PM UTC
  schedule:
    - cron: '0 13 * * *'

  # Allow manual trigger
  workflow_dispatch:

jobs:

  check_for_updates:
    name: üì° Check for updates
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.push.outputs.RELEASE_VERSION }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üõ†Ô∏è NodeJS setup
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: üîß Install dependencies
        run: npm ci

      - name: üì° Install latest versions
        run: |
          cd backend
          npm install parser-de-notas-de-corretagem@latest

      # Electron 28 isn't working with playwright until version 1.41
      # https://github.com/microsoft/playwright/pull/28499#issuecomment-1858698614
      # - name: üì° Install latest versions
      #   run: |
      #     (
      #       cd backend
      #       npm list --parseable | tail -n +2 | sed -r 's,.*node_modules/(.*),\1@latest,g' | tr '\n' ' '
      #     )
      #     (
      #       cd frontend
      #       npm list --parseable | tail -n +2 | sed -r 's,.*node_modules/(.*),\1@latest,g' | tr '\n' ' '
      #     )

      # TODO: this is testing only against linux, so it's not safe once the code above is uncommented
      # https://stackoverflow.com/questions/75733616/github-actions-how-to-call-a-reusable-workflow-as-a-step
      - name: üß™ Test
        run: npm run test && npm run build

      - name: ü§ñ Update remote with changes
        shell: bash
        id: push
        run: |

          # Set bot
          echo "[$(date +"%T")] [DEBUG] Setting bot";
          git config --local user.email "github-actions[bot]@users.noreply.github.com";
          git config --local user.name "github-actions[bot]";

          # Check for changes
          echo "[$(date +"%T")] [DEBUG] Checking for changes";
          git add .;
          status=$(git status);

          if [[ $status =~ "Changes to be committed" ]]; then
            echo "[$(date +"%T")] [DEBUG] New changes detected";

            # Calculate new tag version
            echo "[$(date +"%T")] [DEBUG] Calculating new version from the tag $(git describe --tags)";
            last_version=$(git describe --tags | sed -r -n 's/v([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+).*/\1/p');
            minor="${last_version##*.}";
            major="${last_version%.*}";
            new_version="$major.$((minor + 1))";
            echo "[$(date +"%T")] [DEBUG] New version - v$new_version";

            # Update backend/package.json
            echo "[$(date +"%T")] [DEBUG] Updating backend/package.json";
            package_json_content=$(sed -r "s/$last_version/$new_version/" < backend/package.json);
            echo "$package_json_content" > backend/package.json;
            git diff backend/package.json;

            # Update CHANGELOG.md
            echo "[$(date +"%T")] [DEBUG] Updating CHANGELOG.md";
            changelog_content=$(sed -r "s/## \[$last_version\](.*)/## \[$new_version\] - $(date '+%Y-%m-%d')\n\n### Changed\n\n- Update parser\n\n## \[$last_version\]\1/" < CHANGELOG.md);
            echo "$changelog_content" > CHANGELOG.md;
            git diff CHANGELOG.md;

            # Submit the changes creating a new tag
            echo "[$(date +"%T")] [DEBUG] Submitting changes";
            git add .;
            git commit -m "chore: update parser";
            git tag "v$new_version";
            git push -u origin main --tags;

            # Set flag to trigger the release
            echo "RELEASE_VERSION=v$new_version" >> $GITHUB_OUTPUT;

          else
            echo "[$(date +"%T")] [DEBUG] No changes detected";
          fi

          echo "[$(date +"%T")] [DEBUG] Done";

  # Trigger the release if a version tag was submitted
  # This is required because submits done by bot won't trigger workflows
  make_release:
    needs: check_for_updates
    if: ${{ needs.check_for_updates.outputs.RELEASE_VERSION }}
    uses: ./.github/workflows/release.yml
    secrets: inherit
    with:
      release_version: ${{ needs.check_for_updates.outputs.RELEASE_VERSION }}

# EOF
